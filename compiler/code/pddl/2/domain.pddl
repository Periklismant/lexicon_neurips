(define (domain blocksworld-domain)
 (:requirements :adl :typing :constraints :action-costs)
 (:types block)
 (:predicates (clear ?obj - block) 
              (ontable ?obj - block) 
              (handempty) 
              (holding ?obj - block)
              (on ?obj1 - block ?obj2 - block)
 )

 (:action pickup
  :parameters (?obj - block)
  :precondition (and (clear ?obj) (ontable ?obj) (handempty))
  :effect (and 
            (holding ?obj) 
            (not (clear ?obj)) 
            (not (ontable ?obj)) 
            (not (handempty)) 
          )
 ) 
 (:action pickup-double
  :parameters (?obj - block)
  :precondition (and (ontable ?obj) (handempty) (exists (?topobj - block) (and (on ?topobj ?obj) (clear ?topobj))))
  :effect (and 
            (holding ?obj) 
            (not (ontable ?obj)) 
            (not (handempty)) 
            (and 
                (forall (?topobj - block) 
                    (when (on ?topobj ?obj) 
                          (not(clear ?topobj))
                    )
                )
            )
          )
 )
 (:action putdown
  :parameters ( ?obj - block)
  :precondition (and (holding ?obj))
  :effect (and 
            (handempty) 
            (ontable ?obj) 
            (not (holding ?obj)) 
            (forall (?topobj - block) 
                (when (on ?topobj ?obj) 
                      (clear ?topobj)
                )
            )
            (when (not (exists (?topobj - block) (on ?topobj ?obj)))
                (clear ?obj)
            )
           )
 )
 (:action stack
  :parameters ( ?obj - block ?underobj - block)
  :precondition (and (clear ?underobj) (holding ?obj))
  :effect (and 
            (handempty) 
            (on ?obj ?underobj) 
            (not (clear ?underobj)) 
            (not (holding ?obj)) 
            (forall (?topobj - block) 
                (when (on ?topobj ?obj) 
                      (clear ?topobj)
                )
            )
            (when (not (exists (?topobj - block) (on ?topobj ?obj)))
                (clear ?obj)
            )
          )
 )
 (:action unstack
  :parameters ( ?obj - block ?underobj - block)
  :precondition (and (on ?obj ?underobj) (clear ?obj) (handempty))
  :effect (and 
            (holding ?obj) 
            (clear ?underobj) 
            (not (on ?obj ?underobj)) 
            (not (clear ?obj)) 
            (not (handempty)) 
          )
  )
 (:action unstack-double
  :parameters ( ?obj - block ?underobj - block)
  :precondition (and (on ?obj ?underobj) (handempty) (exists (?topobj - block) (and (on ?topobj ?obj) (clear ?topobj))))
  :effect (and 
            (holding ?obj) 
            (clear ?underobj) 
            (not (on ?obj ?underobj)) 
            (not (handempty)) 
            (and 
                (forall (?topobj - block) 
                    (when (on ?topobj ?obj) 
                          (not(clear ?topobj))
                    )
                )
            ) 
          )
 )
)
