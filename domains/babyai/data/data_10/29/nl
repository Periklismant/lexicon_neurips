You are an agent navigating a 2D gridworld, which consists of 4 rooms. The rooms are arranged in a square formation: room_1 is on the north-west, room_2 is on the south-west, room_3 is on the north-east and room_4 is on the south-east. There are 4 doors connecting the following room pairs: room_1-room_2, room_1-room_3, room_2-room_4, room_3-room_4. The rooms of the gridworld may include two types of objects: boxes and balls. Each door, box and ball in the gridworld has a color.

Provided a planning problem, consisting of an initial state of the world, a final goal and a set of constraints, your task is to provide a valid sequence of actions that solves the planning problem, i.e., bringing about the goal of the problem while satisfying all constraints.The available actions are the following:
	"gotoobject x r": Go in front of to object x in room r.
	"gotoempty": Go in front of an empty position of the room, which does not contain any object.
	"gotodoor d r1 r2": Go in front of door d, connecting room r1 to room r2.
	"gotoroom r1 r2 d": Go to room r2 from room r1 using door d.
	"pick x r": Pick up object x in room r.
	"drop x r": Drop object x in room r.
	"toggle d": Unlock door d if is locked. Lock door d if is unlocked.

An action may only be performed if its preconditions are met.
The actions of this domain have the following preconditions:
	"goto object": you may only go in front of an object x if you are in the same room as x.
	"goto empty": you may go in front of an empty position anytime.
	"goto door": you may only go in front of a door d if (i) you are in a room which door d is connecting with another room, and (ii) there is no object blocking the position in front of d in the room you are currently in.
	"goto room": you may only go in a room r if (i) you are currently in a room r0 that is adjacent to r, and (ii) the door that is connecting r0 and r is unlocked
.	"pick": you may only pick up an object x if (i) you are in the same room as x, and (ii) you are currently not holding any object.
	"drop": you may only drop an object x if (i) you are currently holding x, and (ii) the position in front of you is empty.
	"toggle": you may only toggle a door d if you are in front of d.

The effects of an action are brought about after the action is performed.
An effect may be conditional, in the sense that it manifests only if some conditions hold.
 The actions of this domain have the following effects:
	"goto object": After performing this action regarding an object x, (i) if you were in front of some object or door x0, then you are no longer in front of x0 and (ii) you are in front of object x.
	"goto empty": After performing this action, (i) if you were in front of some object or door x0, then you are no longer in front of x0 and (ii) you are in front of an empty position.
	"goto door": After performing this action regarding a door d, (i) if you were in front of some object or door x0, then you are no longer in front of x0 and (ii) you are in front of door d.
	"goto room": After performing this action in order to go from room r1 to room r2, (i) you are no longer in r1, (ii) you are in r2, (iii) you have visited r2, (iv) if you were in front of some object or door x0, then you are no longer in front of x0.
	"pick": After performing this action regarding an object x, (i) you are no longer in front of x, (ii) your hands are no longer empty, (iii) you are carrying x, (iv) x is no longer in the room, and (v) if x was blocking some door, then it is no longer blocking that door.
	"drop": After performing this action regarding an object x, (i) you are no longer carrying x, (ii) you are in front of x, (iii) your hands are empty, and (iv) object x is situated in the room you are currently in.
	"toggle": After performing this action on a door d, (i) if d was locked, then it becomes unlocked, and (ii) if d was unlocked, then it becomes locked.


The world includes the following objects:
	"Empty empty"
	"Box grey_box_2"
	"Ball green_ball_1"
	"Ball red_ball_2"
	"Box red_box_1"
	"Ball red_ball_1"
	"Ball blue_ball_1"
	"Ball purple_ball_1"
	"Box grey_box_1"
	"Door grey_door_1"
	"Door red_door_1"
	"Door red_door_2"
	"Door purple_door_1"
	"Room room_1"
	"Room room_2"
	"Room room_3"
	"Room room_4"
	"Color RedType"
	"Color GreenType"
	"Color BlueType"
	"Color YellowType"
	"Color PurpleType"
	"Color GreyType"

The original state of the world is the following:
	"you are in room_4"
	"red_ball_1 is in room_1"
	"red_ball_2 is in room_1"
	"grey_box_1 is in room_2"
	"green_ball_1 is in room_2"
	"blue_ball_1 is in room_3"
	"red_box_1 is in room_3"
	"grey_box_2 is in room_3"
	"purple_ball_1 is in room_4"
	"red_ball_1 is Red"
	"red_ball_2 is Red"
	"grey_box_1 is Grey"
	"green_ball_1 is Green"
	"blue_ball_1 is Blue"
	"red_box_1 is Red"
	"grey_box_2 is Grey"
	"purple_ball_1 is Purple"
	"grey_door_1 is Grey"
	"red_door_1 is Red"
	"red_door_2 is Red"
	"purple_door_1 is Purple"
	"you are not holding any object"
	"grey_door_1 is locked"
	"red_door_1 is locked"
	"red_door_2 is locked"
	"purple_door_1 is locked"
	"room_2 and room_1 are connected via grey_door_1"
	"room_1 and room_2 are connected via grey_door_1"
	"room_3 and room_1 are connected via red_door_1"
	"room_1 and room_3 are connected via red_door_1"
	"room_4 and room_2 are connected via red_door_2"
	"room_2 and room_4 are connected via red_door_2"
	"room_4 and room_3 are connected via purple_door_1"
	"room_3 and room_4 are connected via purple_door_1"
	"you have visited room_4"

The task is to bring about the following situation:
	"There is a Ball v such that "The following conditions are all true: "v is Red", "v is in room_1", "you are in room_1", ""

A valid plan for the abovementioned problem must abide by the following constraints:
	"The following expression must hold in at least one state: 
		"
	"The following expression must hold in at least one state: 
		"grey_door_1 is not locked""
	"If expression 
		"grey_door_1 is not locked"
		holds in some state, then there must be an earlier state in which the following expression is true: 
		"you are holding some object""
	"The following expression must hold in every state: 
		"you are not in room_2""
	"The following expression must hold in at least one state: 
		"red_door_1 is not locked""
	"The following expression must hold in at least one state: 
		"you are holding some object""
	"The following expression must hold in at least one state: 
		"
	"If expression 
		
		holds in some state s, then expression
		"At least one of the following conditions is true: "you are holding red_ball_1", "you are holding purple_ball_1""
		must hold at s or at some state after s"
	"The following expression must hold in at least one state: 
		"
	"If expression 
		
		holds in some state, then there must be an earlier state in which the following expression is true: 
		"At least one of the following conditions is true: "purple_door_1 is not locked", "you are in room_3"""
	"The following expression must hold in at least one state: 
		"red_door_2 is locked""
	"If expression 
		"red_door_2 is locked"
		holds in some state s, then expression
		"At least one of the following conditions is true: "you are holding green_ball_1", "purple_door_1 is not locked""
		must hold at s or at some state after s"
	"The following expression must hold in at least one state: 
		"The following conditions are all true: "you are holding some object", "purple_door_1 is not locked"""
	"The following expression must hold in at least one state: 
		"red_door_2 is not locked""
	"If expression 
		"red_door_2 is not locked"
		holds in some state, then there must be an earlier state in which the following expression is true: 
		"you are holding some object""

