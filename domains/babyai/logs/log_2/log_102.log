2025-05-16 10:55:53,238 - INFO - 
================= Seed: 102 =================

2025-05-16 10:55:53,720 - INFO - problem name = Minigrid

types = [Room, ObjectOrDoor, Object - ObjectOrDoor, Color, Door - ObjectOrDoor, Empty - Object, Ball - Object, Box - Object]

fluents = [
  bool agentInRoom[room=Room]
  bool objectInRoom[obj=Object - ObjectOrDoor, room=Room]
  bool objectColor[objectOrDoor=ObjectOrDoor, color=Color]
  bool at[objectOrDoor=ObjectOrDoor]
  bool carrying[obj=Object - ObjectOrDoor]
  bool locked[door=Door - ObjectOrDoor]
  bool adjacentRooms[room1=Room, room2=Room, door=Door - ObjectOrDoor]
  bool blocked[door=Door - ObjectOrDoor, obj=Object - ObjectOrDoor, room=Room]
  bool visited[room=Room]
  bool emptyHands
]

actions = [
  action gotoObject(Object - ObjectOrDoor obj, Room room) {
    preconditions = [
      objectInRoom(obj, room)
      agentInRoom(room)
    ]
    effects = [
      forall Object - ObjectOrDoor o if at(o) then at(o) := false
      forall Door - ObjectOrDoor d if at(d) then at(d) := false
      at(obj) := true
    ]
  }
  action gotoEmpty {
    preconditions = [
    ]
    effects = [
      forall Object - ObjectOrDoor o if at(o) then at(o) := false
      forall Door - ObjectOrDoor d if at(d) then at(d) := false
      at(empty) := true
    ]
  }
  action gotoDoor(Door - ObjectOrDoor door, Room room1, Room room2) {
    preconditions = [
      adjacentRooms(room1, room2, door)
      agentInRoom(room1)
      Forall (Object - ObjectOrDoor o) (not blocked(door, o, room1))
    ]
    effects = [
      forall Object - ObjectOrDoor o if at(o) then at(o) := false
      forall Door - ObjectOrDoor d if at(d) then at(d) := false
      at(door) := true
    ]
  }
  action gotoRoom(Room room1, Room room2, Door - ObjectOrDoor door) {
    preconditions = [
      agentInRoom(room1)
      adjacentRooms(room1, room2, door)
      (not locked(door))
    ]
    effects = [
      agentInRoom(room1) := false
      agentInRoom(room2) := true
      visited(room2) := true
      forall Object - ObjectOrDoor o if at(o) then at(o) := false
      forall Door - ObjectOrDoor d if at(d) then at(d) := false
    ]
  }
  action pick(Object - ObjectOrDoor obj, Room room) {
    preconditions = [
      agentInRoom(room)
      objectInRoom(obj, room)
      at(obj)
      emptyHands
    ]
    effects = [
      at(obj) := false
      emptyHands := false
      carrying(obj) := true
      objectInRoom(obj, room) := false
      forall Door - ObjectOrDoor d if blocked(d, obj, room) then blocked(d, obj, room) := false
    ]
  }
  action drop(Object - ObjectOrDoor obj, Room room) {
    preconditions = [
      agentInRoom(room)
      carrying(obj)
      (not emptyHands)
      at(empty)
    ]
    effects = [
      carrying(obj) := false
      at(obj) := true
      at(empty) := false
      emptyHands := true
      objectInRoom(obj, room) := true
    ]
  }
  action toggle(Door - ObjectOrDoor door) {
    preconditions = [
      at(door)
    ]
    effects = [
      if (not locked(door)) then locked(door) := true
      if locked(door) then locked(door) := false
    ]
  }
]

objects = [
  Room: [room_1, room_2, room_3, room_4]
  ObjectOrDoor: [empty, green_ball_1, red_ball_2, yellow_ball_2, purple_ball_1, yellow_ball_1, yellow_ball_3, yellow_box_1, red_ball_1, green_door_1, green_door_2, blue_door_1, red_door_1]
  Object - ObjectOrDoor: [empty, green_ball_1, red_ball_2, yellow_ball_2, purple_ball_1, yellow_ball_1, yellow_ball_3, yellow_box_1, red_ball_1]
  Color: [RedType, GreenType, BlueType, YellowType, PurpleType, GreyType]
  Door - ObjectOrDoor: [green_door_1, green_door_2, blue_door_1, red_door_1]
  Empty - Object: [empty]
  Ball - Object: [green_ball_1, red_ball_2, yellow_ball_2, purple_ball_1, yellow_ball_1, yellow_ball_3, red_ball_1]
  Box - Object: [yellow_box_1]
]

initial fluents default = [
  bool agentInRoom[room=Room] := false
  bool objectInRoom[obj=Object - ObjectOrDoor, room=Room] := false
  bool objectColor[objectOrDoor=ObjectOrDoor, color=Color] := false
  bool at[objectOrDoor=ObjectOrDoor] := false
  bool carrying[obj=Object - ObjectOrDoor] := false
  bool locked[door=Door - ObjectOrDoor] := false
  bool adjacentRooms[room1=Room, room2=Room, door=Door - ObjectOrDoor] := false
  bool blocked[door=Door - ObjectOrDoor, obj=Object - ObjectOrDoor, room=Room] := false
  bool visited[room=Room] := false
  bool emptyHands := false
]

initial values = [
  agentInRoom(room_4) := true
  objectInRoom(yellow_ball_1, room_1) := true
  objectInRoom(red_ball_1, room_2) := true
  objectInRoom(purple_ball_1, room_2) := true
  objectInRoom(green_ball_1, room_2) := true
  objectInRoom(yellow_ball_2, room_3) := true
  objectInRoom(red_ball_2, room_4) := true
  objectInRoom(yellow_ball_3, room_4) := true
  objectInRoom(yellow_box_1, room_4) := true
  objectColor(yellow_ball_1, YellowType) := true
  objectColor(red_ball_1, RedType) := true
  objectColor(purple_ball_1, PurpleType) := true
  objectColor(green_ball_1, GreenType) := true
  objectColor(yellow_ball_2, YellowType) := true
  objectColor(red_ball_2, RedType) := true
  objectColor(yellow_ball_3, YellowType) := true
  objectColor(yellow_box_1, YellowType) := true
  objectColor(green_door_1, GreenType) := true
  objectColor(green_door_2, GreenType) := true
  objectColor(blue_door_1, BlueType) := true
  objectColor(red_door_1, RedType) := true
  emptyHands := true
  locked(green_door_1) := true
  locked(green_door_2) := true
  locked(blue_door_1) := true
  locked(red_door_1) := true
  adjacentRooms(room_2, room_1, green_door_1) := true
  adjacentRooms(room_1, room_2, green_door_1) := true
  adjacentRooms(room_3, room_1, green_door_2) := true
  adjacentRooms(room_1, room_3, green_door_2) := true
  adjacentRooms(room_4, room_2, blue_door_1) := true
  adjacentRooms(room_2, room_4, blue_door_1) := true
  adjacentRooms(room_4, room_3, red_door_1) := true
  adjacentRooms(room_3, room_4, red_door_1) := true
  visited(room_4) := true
  agentInRoom(room_1) := false
  agentInRoom(room_2) := false
  agentInRoom(room_3) := false
  objectInRoom(empty, room_1) := false
  objectInRoom(green_ball_1, room_1) := false
  objectInRoom(red_ball_2, room_1) := false
  objectInRoom(yellow_ball_2, room_1) := false
  objectInRoom(purple_ball_1, room_1) := false
  objectInRoom(yellow_ball_3, room_1) := false
  objectInRoom(yellow_box_1, room_1) := false
  objectInRoom(red_ball_1, room_1) := false
  objectInRoom(empty, room_2) := false
  objectInRoom(red_ball_2, room_2) := false
  objectInRoom(yellow_ball_2, room_2) := false
  objectInRoom(yellow_ball_1, room_2) := false
  objectInRoom(yellow_ball_3, room_2) := false
  objectInRoom(yellow_box_1, room_2) := false
  objectInRoom(empty, room_3) := false
  objectInRoom(green_ball_1, room_3) := false
  objectInRoom(red_ball_2, room_3) := false
  objectInRoom(purple_ball_1, room_3) := false
  objectInRoom(yellow_ball_1, room_3) := false
  objectInRoom(yellow_ball_3, room_3) := false
  objectInRoom(yellow_box_1, room_3) := false
  objectInRoom(red_ball_1, room_3) := false
  objectInRoom(empty, room_4) := false
  objectInRoom(green_ball_1, room_4) := false
  objectInRoom(yellow_ball_2, room_4) := false
  objectInRoom(purple_ball_1, room_4) := false
  objectInRoom(yellow_ball_1, room_4) := false
  objectInRoom(red_ball_1, room_4) := false
  objectColor(empty, RedType) := false
  objectColor(green_ball_1, RedType) := false
  objectColor(yellow_ball_2, RedType) := false
  objectColor(purple_ball_1, RedType) := false
  objectColor(yellow_ball_1, RedType) := false
  objectColor(yellow_ball_3, RedType) := false
  objectColor(yellow_box_1, RedType) := false
  objectColor(green_door_1, RedType) := false
  objectColor(green_door_2, RedType) := false
  objectColor(blue_door_1, RedType) := false
  objectColor(empty, GreenType) := false
  objectColor(red_ball_2, GreenType) := false
  objectColor(yellow_ball_2, GreenType) := false
  objectColor(purple_ball_1, GreenType) := false
  objectColor(yellow_ball_1, GreenType) := false
  objectColor(yellow_ball_3, GreenType) := false
  objectColor(yellow_box_1, GreenType) := false
  objectColor(red_ball_1, GreenType) := false
  objectColor(blue_door_1, GreenType) := false
  objectColor(red_door_1, GreenType) := false
  objectColor(empty, BlueType) := false
  objectColor(green_ball_1, BlueType) := false
  objectColor(red_ball_2, BlueType) := false
  objectColor(yellow_ball_2, BlueType) := false
  objectColor(purple_ball_1, BlueType) := false
  objectColor(yellow_ball_1, BlueType) := false
  objectColor(yellow_ball_3, BlueType) := false
  objectColor(yellow_box_1, BlueType) := false
  objectColor(red_ball_1, BlueType) := false
  objectColor(green_door_1, BlueType) := false
  objectColor(green_door_2, BlueType) := false
  objectColor(red_door_1, BlueType) := false
  objectColor(empty, YellowType) := false
  objectColor(green_ball_1, YellowType) := false
  objectColor(red_ball_2, YellowType) := false
  objectColor(purple_ball_1, YellowType) := false
  objectColor(red_ball_1, YellowType) := false
  objectColor(green_door_1, YellowType) := false
  objectColor(green_door_2, YellowType) := false
  objectColor(blue_door_1, YellowType) := false
  objectColor(red_door_1, YellowType) := false
  objectColor(empty, PurpleType) := false
  objectColor(green_ball_1, PurpleType) := false
  objectColor(red_ball_2, PurpleType) := false
  objectColor(yellow_ball_2, PurpleType) := false
  objectColor(yellow_ball_1, PurpleType) := false
  objectColor(yellow_ball_3, PurpleType) := false
  objectColor(yellow_box_1, PurpleType) := false
  objectColor(red_ball_1, PurpleType) := false
  objectColor(green_door_1, PurpleType) := false
  objectColor(green_door_2, PurpleType) := false
  objectColor(blue_door_1, PurpleType) := false
  objectColor(red_door_1, PurpleType) := false
  objectColor(empty, GreyType) := false
  objectColor(green_ball_1, GreyType) := false
  objectColor(red_ball_2, GreyType) := false
  objectColor(yellow_ball_2, GreyType) := false
  objectColor(purple_ball_1, GreyType) := false
  objectColor(yellow_ball_1, GreyType) := false
  objectColor(yellow_ball_3, GreyType) := false
  objectColor(yellow_box_1, GreyType) := false
  objectColor(red_ball_1, GreyType) := false
  objectColor(green_door_1, GreyType) := false
  objectColor(green_door_2, GreyType) := false
  objectColor(blue_door_1, GreyType) := false
  objectColor(red_door_1, GreyType) := false
  at(empty) := false
  at(green_ball_1) := false
  at(red_ball_2) := false
  at(yellow_ball_2) := false
  at(purple_ball_1) := false
  at(yellow_ball_1) := false
  at(yellow_ball_3) := false
  at(yellow_box_1) := false
  at(red_ball_1) := false
  at(green_door_1) := false
  at(green_door_2) := false
  at(blue_door_1) := false
  at(red_door_1) := false
  carrying(empty) := false
  carrying(green_ball_1) := false
  carrying(red_ball_2) := false
  carrying(yellow_ball_2) := false
  carrying(purple_ball_1) := false
  carrying(yellow_ball_1) := false
  carrying(yellow_ball_3) := false
  carrying(yellow_box_1) := false
  carrying(red_ball_1) := false
  adjacentRooms(room_1, room_1, green_door_1) := false
  adjacentRooms(room_3, room_1, green_door_1) := false
  adjacentRooms(room_4, room_1, green_door_1) := false
  adjacentRooms(room_2, room_2, green_door_1) := false
  adjacentRooms(room_3, room_2, green_door_1) := false
  adjacentRooms(room_4, room_2, green_door_1) := false
  adjacentRooms(room_1, room_3, green_door_1) := false
  adjacentRooms(room_2, room_3, green_door_1) := false
  adjacentRooms(room_3, room_3, green_door_1) := false
  adjacentRooms(room_4, room_3, green_door_1) := false
  adjacentRooms(room_1, room_4, green_door_1) := false
  adjacentRooms(room_2, room_4, green_door_1) := false
  adjacentRooms(room_3, room_4, green_door_1) := false
  adjacentRooms(room_4, room_4, green_door_1) := false
  adjacentRooms(room_1, room_1, green_door_2) := false
  adjacentRooms(room_2, room_1, green_door_2) := false
  adjacentRooms(room_4, room_1, green_door_2) := false
  adjacentRooms(room_1, room_2, green_door_2) := false
  adjacentRooms(room_2, room_2, green_door_2) := false
  adjacentRooms(room_3, room_2, green_door_2) := false
  adjacentRooms(room_4, room_2, green_door_2) := false
  adjacentRooms(room_2, room_3, green_door_2) := false
  adjacentRooms(room_3, room_3, green_door_2) := false
  adjacentRooms(room_4, room_3, green_door_2) := false
  adjacentRooms(room_1, room_4, green_door_2) := false
  adjacentRooms(room_2, room_4, green_door_2) := false
  adjacentRooms(room_3, room_4, green_door_2) := false
  adjacentRooms(room_4, room_4, green_door_2) := false
  adjacentRooms(room_1, room_1, blue_door_1) := false
  adjacentRooms(room_2, room_1, blue_door_1) := false
  adjacentRooms(room_3, room_1, blue_door_1) := false
  adjacentRooms(room_4, room_1, blue_door_1) := false
  adjacentRooms(room_1, room_2, blue_door_1) := false
  adjacentRooms(room_2, room_2, blue_door_1) := false
  adjacentRooms(room_3, room_2, blue_door_1) := false
  adjacentRooms(room_1, room_3, blue_door_1) := false
  adjacentRooms(room_2, room_3, blue_door_1) := false
  adjacentRooms(room_3, room_3, blue_door_1) := false
  adjacentRooms(room_4, room_3, blue_door_1) := false
  adjacentRooms(room_1, room_4, blue_door_1) := false
  adjacentRooms(room_3, room_4, blue_door_1) := false
  adjacentRooms(room_4, room_4, blue_door_1) := false
  adjacentRooms(room_1, room_1, red_door_1) := false
  adjacentRooms(room_2, room_1, red_door_1) := false
  adjacentRooms(room_3, room_1, red_door_1) := false
  adjacentRooms(room_4, room_1, red_door_1) := false
  adjacentRooms(room_1, room_2, red_door_1) := false
  adjacentRooms(room_2, room_2, red_door_1) := false
  adjacentRooms(room_3, room_2, red_door_1) := false
  adjacentRooms(room_4, room_2, red_door_1) := false
  adjacentRooms(room_1, room_3, red_door_1) := false
  adjacentRooms(room_2, room_3, red_door_1) := false
  adjacentRooms(room_3, room_3, red_door_1) := false
  adjacentRooms(room_1, room_4, red_door_1) := false
  adjacentRooms(room_2, room_4, red_door_1) := false
  adjacentRooms(room_4, room_4, red_door_1) := false
  blocked(green_door_1, empty, room_1) := false
  blocked(green_door_2, empty, room_1) := false
  blocked(blue_door_1, empty, room_1) := false
  blocked(red_door_1, empty, room_1) := false
  blocked(green_door_1, green_ball_1, room_1) := false
  blocked(green_door_2, green_ball_1, room_1) := false
  blocked(blue_door_1, green_ball_1, room_1) := false
  blocked(red_door_1, green_ball_1, room_1) := false
  blocked(green_door_1, red_ball_2, room_1) := false
  blocked(green_door_2, red_ball_2, room_1) := false
  blocked(blue_door_1, red_ball_2, room_1) := false
  blocked(red_door_1, red_ball_2, room_1) := false
  blocked(green_door_1, yellow_ball_2, room_1) := false
  blocked(green_door_2, yellow_ball_2, room_1) := false
  blocked(blue_door_1, yellow_ball_2, room_1) := false
  blocked(red_door_1, yellow_ball_2, room_1) := false
  blocked(green_door_1, purple_ball_1, room_1) := false
  blocked(green_door_2, purple_ball_1, room_1) := false
  blocked(blue_door_1, purple_ball_1, room_1) := false
  blocked(red_door_1, purple_ball_1, room_1) := false
  blocked(green_door_1, yellow_ball_1, room_1) := false
  blocked(green_door_2, yellow_ball_1, room_1) := false
  blocked(blue_door_1, yellow_ball_1, room_1) := false
  blocked(red_door_1, yellow_ball_1, room_1) := false
  blocked(green_door_1, yellow_ball_3, room_1) := false
  blocked(green_door_2, yellow_ball_3, room_1) := false
  blocked(blue_door_1, yellow_ball_3, room_1) := false
  blocked(red_door_1, yellow_ball_3, room_1) := false
  blocked(green_door_1, yellow_box_1, room_1) := false
  blocked(green_door_2, yellow_box_1, room_1) := false
  blocked(blue_door_1, yellow_box_1, room_1) := false
  blocked(red_door_1, yellow_box_1, room_1) := false
  blocked(green_door_1, red_ball_1, room_1) := false
  blocked(green_door_2, red_ball_1, room_1) := false
  blocked(blue_door_1, red_ball_1, room_1) := false
  blocked(red_door_1, red_ball_1, room_1) := false
  blocked(green_door_1, empty, room_2) := false
  blocked(green_door_2, empty, room_2) := false
  blocked(blue_door_1, empty, room_2) := false
  blocked(red_door_1, empty, room_2) := false
  blocked(green_door_1, green_ball_1, room_2) := false
  blocked(green_door_2, green_ball_1, room_2) := false
  blocked(blue_door_1, green_ball_1, room_2) := false
  blocked(red_door_1, green_ball_1, room_2) := false
  blocked(green_door_1, red_ball_2, room_2) := false
  blocked(green_door_2, red_ball_2, room_2) := false
  blocked(blue_door_1, red_ball_2, room_2) := false
  blocked(red_door_1, red_ball_2, room_2) := false
  blocked(green_door_1, yellow_ball_2, room_2) := false
  blocked(green_door_2, yellow_ball_2, room_2) := false
  blocked(blue_door_1, yellow_ball_2, room_2) := false
  blocked(red_door_1, yellow_ball_2, room_2) := false
  blocked(green_door_1, purple_ball_1, room_2) := false
  blocked(green_door_2, purple_ball_1, room_2) := false
  blocked(blue_door_1, purple_ball_1, room_2) := false
  blocked(red_door_1, purple_ball_1, room_2) := false
  blocked(green_door_1, yellow_ball_1, room_2) := false
  blocked(green_door_2, yellow_ball_1, room_2) := false
  blocked(blue_door_1, yellow_ball_1, room_2) := false
  blocked(red_door_1, yellow_ball_1, room_2) := false
  blocked(green_door_1, yellow_ball_3, room_2) := false
  blocked(green_door_2, yellow_ball_3, room_2) := false
  blocked(blue_door_1, yellow_ball_3, room_2) := false
  blocked(red_door_1, yellow_ball_3, room_2) := false
  blocked(green_door_1, yellow_box_1, room_2) := false
  blocked(green_door_2, yellow_box_1, room_2) := false
  blocked(blue_door_1, yellow_box_1, room_2) := false
  blocked(red_door_1, yellow_box_1, room_2) := false
  blocked(green_door_1, red_ball_1, room_2) := false
  blocked(green_door_2, red_ball_1, room_2) := false
  blocked(blue_door_1, red_ball_1, room_2) := false
  blocked(red_door_1, red_ball_1, room_2) := false
  blocked(green_door_1, empty, room_3) := false
  blocked(green_door_2, empty, room_3) := false
  blocked(blue_door_1, empty, room_3) := false
  blocked(red_door_1, empty, room_3) := false
  blocked(green_door_1, green_ball_1, room_3) := false
  blocked(green_door_2, green_ball_1, room_3) := false
  blocked(blue_door_1, green_ball_1, room_3) := false
  blocked(red_door_1, green_ball_1, room_3) := false
  blocked(green_door_1, red_ball_2, room_3) := false
  blocked(green_door_2, red_ball_2, room_3) := false
  blocked(blue_door_1, red_ball_2, room_3) := false
  blocked(red_door_1, red_ball_2, room_3) := false
  blocked(green_door_1, yellow_ball_2, room_3) := false
  blocked(green_door_2, yellow_ball_2, room_3) := false
  blocked(blue_door_1, yellow_ball_2, room_3) := false
  blocked(red_door_1, yellow_ball_2, room_3) := false
  blocked(green_door_1, purple_ball_1, room_3) := false
  blocked(green_door_2, purple_ball_1, room_3) := false
  blocked(blue_door_1, purple_ball_1, room_3) := false
  blocked(red_door_1, purple_ball_1, room_3) := false
  blocked(green_door_1, yellow_ball_1, room_3) := false
  blocked(green_door_2, yellow_ball_1, room_3) := false
  blocked(blue_door_1, yellow_ball_1, room_3) := false
  blocked(red_door_1, yellow_ball_1, room_3) := false
  blocked(green_door_1, yellow_ball_3, room_3) := false
  blocked(green_door_2, yellow_ball_3, room_3) := false
  blocked(blue_door_1, yellow_ball_3, room_3) := false
  blocked(red_door_1, yellow_ball_3, room_3) := false
  blocked(green_door_1, yellow_box_1, room_3) := false
  blocked(green_door_2, yellow_box_1, room_3) := false
  blocked(blue_door_1, yellow_box_1, room_3) := false
  blocked(red_door_1, yellow_box_1, room_3) := false
  blocked(green_door_1, red_ball_1, room_3) := false
  blocked(green_door_2, red_ball_1, room_3) := false
  blocked(blue_door_1, red_ball_1, room_3) := false
  blocked(red_door_1, red_ball_1, room_3) := false
  blocked(green_door_1, empty, room_4) := false
  blocked(green_door_2, empty, room_4) := false
  blocked(blue_door_1, empty, room_4) := false
  blocked(red_door_1, empty, room_4) := false
  blocked(green_door_1, green_ball_1, room_4) := false
  blocked(green_door_2, green_ball_1, room_4) := false
  blocked(blue_door_1, green_ball_1, room_4) := false
  blocked(red_door_1, green_ball_1, room_4) := false
  blocked(green_door_1, red_ball_2, room_4) := false
  blocked(green_door_2, red_ball_2, room_4) := false
  blocked(blue_door_1, red_ball_2, room_4) := false
  blocked(red_door_1, red_ball_2, room_4) := false
  blocked(green_door_1, yellow_ball_2, room_4) := false
  blocked(green_door_2, yellow_ball_2, room_4) := false
  blocked(blue_door_1, yellow_ball_2, room_4) := false
  blocked(red_door_1, yellow_ball_2, room_4) := false
  blocked(green_door_1, purple_ball_1, room_4) := false
  blocked(green_door_2, purple_ball_1, room_4) := false
  blocked(blue_door_1, purple_ball_1, room_4) := false
  blocked(red_door_1, purple_ball_1, room_4) := false
  blocked(green_door_1, yellow_ball_1, room_4) := false
  blocked(green_door_2, yellow_ball_1, room_4) := false
  blocked(blue_door_1, yellow_ball_1, room_4) := false
  blocked(red_door_1, yellow_ball_1, room_4) := false
  blocked(green_door_1, yellow_ball_3, room_4) := false
  blocked(green_door_2, yellow_ball_3, room_4) := false
  blocked(blue_door_1, yellow_ball_3, room_4) := false
  blocked(red_door_1, yellow_ball_3, room_4) := false
  blocked(green_door_1, yellow_box_1, room_4) := false
  blocked(green_door_2, yellow_box_1, room_4) := false
  blocked(blue_door_1, yellow_box_1, room_4) := false
  blocked(red_door_1, yellow_box_1, room_4) := false
  blocked(green_door_1, red_ball_1, room_4) := false
  blocked(green_door_2, red_ball_1, room_4) := false
  blocked(blue_door_1, red_ball_1, room_4) := false
  blocked(red_door_1, red_ball_1, room_4) := false
  visited(room_1) := false
  visited(room_2) := false
  visited(room_3) := false
]

goals = [
  Exists (Ball - Object v) (objectColor(v, YellowType) and objectInRoom(v, room_3) and agentInRoom(room_3) and at(v))
]

quality metrics = [
  minimize sequential-plan-length
]


2025-05-16 10:55:53,733 - INFO - Generating plan for unconstrained problem

2025-05-16 10:55:53,733 - INFO - Unconstrained plan generation time: 2.384185791015625e-07

2025-05-16 10:55:53,733 - INFO - Unconstrained plan and cost: 
2025-05-16 10:55:53,733 - INFO - SequentialPlan:
    gotoDoor(red_door_1, room_4, room_3)
    toggle(red_door_1)
    gotoRoom(room_4, room_3, red_door_1)
    gotoObject(yellow_ball_2, room_3)
2025-05-16 10:55:53,733 - INFO - 4
2025-05-16 10:55:54,055 - INFO - Sampled constraints:

2025-05-16 10:55:54,055 - INFO - Sometime((not locked(green_door_2)))
2025-05-16 10:55:54,055 - INFO - Sometime((not locked(red_door_1)))
2025-05-16 10:55:54,055 - INFO - Sometime-Before((not locked(red_door_1)), ((not emptyHands) or carrying(red_ball_1)))
2025-05-16 10:55:54,055 - INFO - 
2025-05-16 10:55:54,055 - INFO - Generation time: 0.2998995780944824

2025-05-16 10:55:54,055 - INFO - Generating plan for constrained problem (with LiftedTCORE).

2025-05-16 10:55:54,077 - INFO - LiftedTCORE compilation time: 0.021244525909423828

2025-05-16 10:55:54,610 - INFO - Planning Time with LiftedTCORE's file: 0.5334310531616211

2025-05-16 10:55:54,611 - INFO - Plan found with LiftedTCORE + sym_bd: SequentialPlan:
    gotoObject(red_ball_2, room_4)
    pick(red_ball_2, room_4)
    gotoDoor(red_door_1, room_4, room_3)
    toggle(red_door_1)
    gotoRoom(room_4, room_3, red_door_1)
    gotoDoor(green_door_2, room_3, room_1)
    toggle(green_door_2)
    gotoObject(yellow_ball_2, room_3)
2025-05-16 10:55:54,611 - INFO - Seed: 102 is solvable

2025-05-16 10:55:54,611 - INFO - Unconstrained cost: 4
2025-05-16 10:55:54,611 - INFO - Constrained cost: 8
2025-05-16 10:55:54,629 - INFO - Seed: 102 Constrained plan simulation is not feasible
