Let's break down the problem step-by-step to find an optimal plan that satisfies all the given constraints.

### Initial State:
- orange_block_1: on table, has purple_block_1 on top (purple_block_1 is clear)
- brown_block_1: on table, has red_block_1 on top (red_block_1 is clear)
- green_block_1: on table, has grey_block_1 on top (grey_block_1 is clear)
- green_block_2: on table, clear
- purple_block_1: on orange_block_1, clear
- red_block_1: on brown_block_1, clear
- grey_block_1: on green_block_1, clear
- Arm: empty

### Goal:
- green_block_2 is on top of orange_block_1

### Constraints:
1. At some point, purple_block_1 must not be clear (i.e., something must be on top of it).
2. If purple_block_1 is not clear at some point, then earlier either:
   - brown_block_1 must be clear, or
   - green_block_2 must be on top of purple_block_1.

### Plan Steps:
1. To satisfy the first constraint, we need to place a block on purple_block_1. The only blocks that can be moved are green_block_2 (clear on table), red_block_1 (clear on brown_block_1), or grey_block_1 (clear on green_block_1). green_block_2 is the target block for the goal, so we'll use red_block_1 or grey_block_1 to satisfy the constraint.
2. Let's choose grey_block_1 to place on purple_block_1. This will satisfy the first constraint (purple_block_1 not clear).
   - To do this, we must unstack grey_block_1 from green_block_1 and stack it on purple_block_1.
3. Before stacking grey_block_1 on purple_block_1, we must ensure the second constraint is satisfied. The second constraint requires that either brown_block_1 is clear or green_block_2 is on purple_block_1 earlier. Since green_block_2 is not on purple_block_1 yet, we must make brown_block_1 clear.
   - To make brown_block_1 clear, we must unstack red_block_1 from brown_block_1 and put it down on the table.
4. Now we can proceed to stack grey_block_1 on purple_block_1, satisfying the first constraint.
5. Finally, we can stack green_block_2 on orange_block_1 to achieve the goal.

### Optimal Plan:
```
```
unstack red_block_1 brown_block_1
putdown red_block_1
unstack grey_block_1 green_block_1
stack grey_block_1 purple_block_1
pickup green_block_2
stack green_block_2 orange_block_1
```
```

### Explanation:
1. `unstack red_block_1 brown_block_1`: This makes brown_block_1 clear, satisfying the second constraint's first condition.
2. `putdown red_block_1`: Places red_block_1 on the table to free the arm.
3. `unstack grey_block_1 green_block_1`: Picks up grey_block_1 to prepare for stacking on purple_block_1.
4. `stack grey_block_1 purple_block_1`: Places grey_block_1 on purple_block_1, making purple_block_1 not clear (satisfies the first constraint).
5. `pickup green_block_2`: Picks up green_block_2 to prepare for stacking on orange_block_1.
6. `stack green_block_2 orange_block_1`: Achieves the goal.

This plan is optimal (6 steps) and satisfies all constraints.