To solve this planning problem, we need to achieve the goal of holding `blue_block_1` while satisfying the given constraints. Let's break down the problem step-by-step.

### Initial State:
- `orange_block_1` is on the table.
- `yellow_block_1` is on top of `orange_block_1`.
- `black_block_1` is on top of `yellow_block_1`.
- `black_block_2` is on the table.
- `white_block_1` is on the table.
- `red_block_1` is on top of `white_block_1`.
- `blue_block_1` is on top of `black_block_2`.
- `black_block_1`, `red_block_1`, and `blue_block_1` are clear (no blocks on top).
- The robotic arm is not holding any block.

### Goal:
- The robotic arm is holding `blue_block_1`.

### Constraints:
1. At some point, `blue_block_1` must not be clear (i.e., there must be a block on top of it).
2. If `blue_block_1` is not clear at some point, then `red_block_1` must have been on the table at an earlier state.

### Plan:
1. First, we need to satisfy the constraints. To make `blue_block_1` not clear, we must place a block on top of it. The only block that can be placed on `blue_block_1` is `red_block_1` (since it's clear and on `white_block_1`).
2. Before placing `red_block_1` on `blue_block_1`, `red_block_1` must be on the table (as per the second constraint). So, we first unstack `red_block_1` from `white_block_1` and put it on the table.
3. Then, we can stack `red_block_1` on `blue_block_1` to make `blue_block_1` not clear.
4. Finally, we can unstack `blue_block_1` from `black_block_2` to achieve the goal.

### Step-by-Step Plan:
1. Unstack `red_block_1` from `white_block_1` (this makes `red_block_1` on the table, satisfying the second constraint).
2. Stack `red_block_1` on `blue_block_1` (this makes `blue_block_1` not clear, satisfying the first constraint).
3. Unstack `blue_block_1` from `black_block_2` (this achieves the goal of holding `blue_block_1`).

### Final Plan:
```
```
unstack red_block_1 white_block_1
stack red_block_1 blue_block_1
unstack blue_block_1 black_block_2
```
```