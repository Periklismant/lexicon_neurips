To solve this planning problem, we need to find a sequence of actions that results in the robotic arm holding the `red_block_1` while satisfying the given constraints. Let's break down the problem step by step.

### Initial State:
- `white_block_1` is on the table with `red_block_1` on top of it.
- `brown_block_1`, `yellow_block_1`, and `grey_block_1` are on the table.
- `blue_block_1` is on top of `yellow_block_1`, and `brown_block_2` is on top of `blue_block_1`.
- The blocks `red_block_1`, `brown_block_1`, `grey_block_1`, and `brown_block_2` are clear (no blocks on top of them).
- The robotic arm is not holding any block.

### Goal:
- The robotic arm is holding `red_block_1`.

### Constraints:
1. At some point, `grey_block_1` must not be on top of `blue_block_1`. Since `grey_block_1` is initially on the table, this constraint is already satisfied in the initial state (because `grey_block_1` is not on top of `blue_block_1`).
2. If `grey_block_1` is not on top of `blue_block_1` in some state, then `yellow_block_1` must be on top of `blue_block_1` in that state or a later state. Initially, `blue_block_1` is on top of `yellow_block_1`, so this constraint is not satisfied yet. We need to ensure that at some point, `yellow_block_1` is on top of `blue_block_1`.

### Plan:
To achieve the goal and satisfy the constraints, we can proceed as follows:
1. First, ensure that the constraint is satisfied by making `yellow_block_1` on top of `blue_block_1`. This requires unstacking `brown_block_2` from `blue_block_1`, then unstacking `blue_block_1` from `yellow_block_1`, and then stacking `yellow_block_1` on top of `blue_block_1`.
2. Then, pick up `red_block_1` from `white_block_1`.

Here is the optimal plan:

```
```
unstack brown_block_2 blue_block_1
unstack blue_block_1 yellow_block_1
stack yellow_block_1 blue_block_1
unstack red_block_1 white_block_1
```
```

### Explanation:
1. `unstack brown_block_2 blue_block_1`: This action picks up `brown_block_2` from `blue_block_1`, making `blue_block_1` clear.
2. `unstack blue_block_1 yellow_block_1`: This action picks up `blue_block_1` from `yellow_block_1`, making `yellow_block_1` clear.
3. `stack yellow_block_1 blue_block_1`: This action places `yellow_block_1` on top of `blue_block_1`, satisfying the constraint that `yellow_block_1` is on top of `blue_block_1` at some point after `grey_block_1` is not on top of `blue_block_1` (which is already true in the initial state).
4. `unstack red_block_1 white_block_1`: This action picks up `red_block_1` from `white_block_1`, achieving the goal.

This plan is optimal because it achieves the goal in the fewest possible steps while satisfying all constraints.