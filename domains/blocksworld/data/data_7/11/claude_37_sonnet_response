Alright, let's first analyze the problem. We have a blocksworld problem where we need to move blocks from their initial configuration to a goal configuration, while satisfying some constraints.

Here's the initial state:
- yellow_block_1 is on the table
- black_block_1 is on the table
- grey_block_1 is on the table
- grey_block_2 is on top of grey_block_1
- white_block_1 is on top of yellow_block_1
- yellow_block_2 is on the table
- blue_block_1 is on the table
- black_block_1, grey_block_2, white_block_1, yellow_block_2, blue_block_1 are clear
- We're not holding any block

The goal state is:
- blue_block_1 is on top of yellow_block_2

Let's analyze the constraints:

1. At some point, we need to have: we're holding grey_block_1 AND blue_block_1 is on top of black_block_1
2. At some point, grey_block_1 must be clear
3. At some point, either grey_block_1 is on top of white_block_1 OR yellow_block_1 is clear
4. At some point, yellow_block_1 is not on the table AND black_block_1 is not clear
5. At some point, blue_block_1 is not on the table
6. If blue_block_1 is not on the table, then there must be an earlier state where yellow_block_2 is not clear
7. At some point, yellow_block_2 must be clear
8. If yellow_block_2 is clear, then at the same state or some later state, either blue_block_1 is on top of black_block_1 OR grey_block_2 is on the table
9. At some point, we're holding blue_block_1
10. If we're holding blue_block_1, then there must be an earlier state where grey_block_2 is on top of blue_block_1

Alright, let's think about this. We need to create a plan that not only achieves the goal state but also satisfies these constraints. Let's break down the constraints and see what they imply:

Constraint 10 implies that at some point, grey_block_2 must be on top of blue_block_1.
Constraint 9 implies that at some point, we're holding blue_block_1.
Constraint 8 relates yellow_block_2 being clear to either blue_block_1 being on top of black_block_1 or grey_block_2 being on the table.
Constraint 7 says that yellow_block_2 must be clear at some point, which it already is in the initial state.
Constraint 6 relates blue_block_1 not being on the table to yellow_block_2 being not clear in an earlier state.
Constraint 5 says that blue_block_1 must not be on the table at some point, which means it must be either on top of another block or held by the robot.
Constraint 4 says that at some point, yellow_block_1 is not on the table and black_block_1 is not clear.
Constraint 3 says that at some point, either grey_block_1 is on top of white_block_1 or yellow_block_1 is clear.
Constraint 2 says that grey_block_1 must be clear at some point, which it's not in the initial state since grey_block_2 is on top of it.
Constraint 1 says that at some point, we're holding grey_block_1 and blue_block_1 is on top of black_block_1.

Now, let's try to determine a valid plan to reach the goal state while satisfying all these constraints. Let's think step by step:

Initial State:
- yellow_block_1 is on the table with white_block_1 on top of it
- black_block_1 is on the table and is clear
- grey_block_1 is on the table with grey_block_2 on top of it
- yellow_block_2 is on the table and is clear
- blue_block_1 is on the table and is clear

Goal State:
- blue_block_1 is on top of yellow_block_2

Let's think about how to implement those constraints:

First, we need to have grey_block_2 on top of blue_block_1 at some point (constraint 10). So we need to move grey_block_2 from grey_block_1 to blue_block_1.

1. unstack grey_block_2 grey_block_1
2. stack grey_block_2 blue_block_1

Now, grey_block_1 is clear (constraint 2 is satisfied). And we have grey_block_2 on top of blue_block_1 (this will help with constraint 10).

Next, we need to ensure that blue_block_1 is on top of black_block_1 (constraint 1) and we're holding grey_block_1 (also constraint 1). We also need to ensure yellow_block_1 is not on the table and black_block_1 is not clear (constraint 4).

3. pickup grey_block_1
4. stack grey_block_1 white_block_1

Now we have satisfied constraint 3 (grey_block_1 is on top of white_block_1). But we've used grey_block_1, which we need to hold while blue_block_1 is on top of black_block_1 (constraint 1). So let's backtrack a bit.

Actually, let's re-think. Constraint 3 is an OR condition, stating that either grey_block_1 is on top of white_block_1 OR yellow_block_1 is clear. So we don't necessarily need to place grey_block_1 on white_block_1. Instead, we can make yellow_block_1 clear.

3. unstack white_block_1 yellow_block_1
4. stack white_block_1 black_block_1

Now, yellow_block_1 is clear (satisfying one part of constraint 3) and black_block_1 is not clear (part of constraint 4). We still need to make yellow_block_1 not on the table (the other part of constraint 4).

5. pickup yellow_block_1
6. stack yellow_block_1 white_block_1

Now yellow_block_1 is not on the table (it's on white_block_1), satisfying the other part of constraint 4.

Next, we need to have blue_block_1 on top of black_block_1 at some point (part of constraint 1) and we need to be holding grey_block_1 at the same time (also part of constraint 1).

First, unstack grey_block_2 from blue_block_1.

7. unstack grey_block_2 blue_block_1
8. putdown grey_block_2

Now, we satisfy constraint 8 by ensuring that once yellow_block_2 is clear (which it already is), we have grey_block_2 on the table.

9. pickup blue_block_1
10. stack blue_block_1 black_block_1

Now, blue_block_1 is on top of black_block_1 (partial fulfillment of constraint 1). But we need to be holding grey_block_1 simultaneously to fully satisfy constraint 1. And to do that, grey_block_1 must be clear.

11. pickup grey_block_1
(At this point, constraint 1 is fully satisfied: we're holding grey_block_1 and blue_block_1 is on top of black_block_1.)

12. putdown grey_block_1

Constraint 5 is also satisfied because blue_block_1is on top of black_block_1, so it's not on the table.

Now, we need to place blue_block_1 on top of yellow_block_2 (the goal). But before we can do that, constraint 6 requires that yellow_block_2 is not clear before blue_block_1 is not on the table. But we've already moved blue_block_1 onto black_block_1, which means it's not on the table. So, we need to ensure that yellow_block_2 is not clear before we moved blue_block_1.

But this creates a problem, because in our current plan, we haven't made yellow_block_2 not clear yet, and we've already moved blue_block_1. So we need to revise our approach.

Let's start over.

Initial State:
- yellow_block_1 is on the table with white_block_1 on top of it
- black_block_1 is on the table and is clear
- grey_block_1 is on the table with grey_block_2 on top of it
- yellow_block_2 is on the table and is clear
- blue_block_1 is on the table and is clear

Given the constraints, we need to do a few things in order:
1. Make yellow_block_2 not clear before we move blue_block_1 from the table.
2. Place grey_block_2 on top of blue_block_1 before we pick up blue_block_1.
3. At some point, blue_block_1 is on top of black_block_1 and we're holding grey_block_1.
4. Ensure yellow_block_1 is not on the table and black_block_1 is not clear at some point.
5. Ensure either grey_block_1 is on top of white_block_1 or yellow_block_1 is clear at some point.
6. Ensure grey_block_1 is clear at some point.
7. Achieve the goal: blue_block_1 is on top of yellow_block_2.

Let's start by moving grey_block_2 from on top of grey_block_1. This will make grey_block_1 clear, satisfying constraint 2.

1. unstack grey_block_2 grey_block_1
2. stack grey_block_2 blue_block_1

Now, grey_block_1 is clear, satisfying constraint 2. Grey_block_2 is on top of blue_block_1 (we'll need this for constraint 10).

Let's now make yellow_block_2 not clear by stacking something on it. This is necessary for constraint 6, which requires yellow_block_2 to be not clear before blue_block_1 is not on the table.

3. pickup grey_block_1
4. stack grey_block_1 yellow_block_2

Now, yellow_block_2 is not clear. We'll need to remove grey_block_1 later. But before that, let's unstack white_block_1 from yellow_block_1. This will make yellow_block_1 clear, which, along with grey_block_1 being on top of yellow_block_2, satisfies constraint 3.

5. unstack white_block_1 yellow_block_1
6. stack white_block_1 black_block_1

Now, yellow_block_1 is clear and black_block_1 is not clear. Let's move yellow_block_1 off the table.

7. pickup yellow_block_1
8. stack yellow_block_1 white_block_1

Now, yellow_block_1 is not on the table and black_block_1 is not clear, satisfying constraint 4.

Next, let's prepare for constraint 1. First, unstack grey_block_2 from blue_block_1.

9. unstack grey_block_2 blue_block_1
10. putdown grey_block_2

Now, grey_block_2 is on the table, which helps with constraint 8. Next, pick up blue_block_1 (constraint 9) and place it on black_block_1.

11. pickup blue_block_1
12. stack blue_block_1 yellow_block_1

Wait, I need blue_block_1 to be on top of black_block_1 to satisfy constraint 1. But black_block_1 is already under white_block_1 and yellow_block_1. Let's reconsider this aspect.

Actually, let's go back to the constraints again. Constraint 1 says at some point, we're holding grey_block_1 and blue_block_1 is on top of black_block_1. We've already moved grey_block_1 onto yellow_block_2, so it's not possible for us to be holding it while blue_block_1 is on top of black_block_1. So we need to revise our approach.

Hm, actually, I think I am getting a bit confused because I'm trying to go in sequence. Let's try to draw out a plan. One option is to place things back on the table if we need them. Actually, I think it's probably best to first think about the actions that will achieve the constraints, and then figure out the ordering.

1. unstack grey_block_2 grey_block_1 (This satisfies constraint 2: grey_block_1 is clear)

2. stack grey_block_2 blue_block_1 (This helps satisfy constraint 10: grey_block_2 is on top of blue_block_1)

3. pickup grey_block_1 (To satisfy constraint 1, we'll need to hold grey_block_1)

4. stack grey_block_1 yellow_block_2 (This makes yellow_block_2 not clear, required for constraint 6 before blue_block_1 is moved)

5. unstack white_block_1 yellow_block_1 (This makes yellow_block_1 clear, helping satisfy constraint 3)

6. stack white_block_1 black_block_1 (This makes black_block_1 not clear, required for constraint 4)

7. pickup yellow_block_1 (To satisfy constraint 4, we need yellow_block_1 not on the table)

8. stack yellow_block_1 white_block_1 (Now, yellow_block_1 is not on the table, satisfying constraint 4 along with black_block_1 not being clear)

9. unstack grey_block_1 yellow_block_2 (We need to pick up grey_block_1 again and hold it while blue_block_1 is on black_block_1)

10. unstack grey_block_2 blue_block_1 (We need to free blue_block_1 to move it)

11. stack grey_block_2 black_block_1 (This is to move grey_block_2, making blue_block_1 accessible)

12. pickup blue_block_1 (Satisfies constraint 9: we're holding blue_block_1)

13. stack blue_block_1 black_block_1 (This ensures blue_block_1 is on top of black_block_1. Along with holding grey_block_1, this satisfies constraint 1)

14. putdown grey_block_1 (We're done with grey_block_1 for now)

15. unstack blue_block_1 black_block_1 (We need to move blue_block_1 to yellow_block_2)

16. unstack grey_block_2 black_block_1 (To position blue_block_1 on top of yellow_block_2, which is our goal)

17. stack grey_block_2 grey_block_1 (We place grey_block_2 elsewhere)

18. stack blue_block_1 yellow_block_2 (Goal achieved: blue_block_1 is on top of yellow_block_2)

Wait, there's a problem with this plan. Constraint 1 requires we're holding grey_block_1 AND blue_block_1 is on top of black_block_1. But if we're holding grey_block_1, we can't be holding blue_block_1. So we can't satisfy this constraint with our current approach. Let's think differently.

Actually, I misunderstood a bit. I'm looking at our specific plan and how it matches the constraints.

What constraint 1 requires is "At some point, we are holding grey_block_1 AND blue_block_1 is on top of black_block_1." This doesn't mean both conditions need to be met simultaneously in our plan, because these two conditions are related to different objects. It means both conditions should be true at the same state. So, in our plan, there should be a state where we're holding grey_block_1 and, at the same time, blue_block_1 is on top of black_block_1.

So I need to fix the above plan:

1. unstack grey_block_2 grey_block_1 (This satisfies constraint 2: grey_block_1 is clear)

2. stack grey_block_2 blue_block_1 (This helps satisfy constraint 10: grey_block_2 is on top of blue_block_1)

3. unstack white_block_1 yellow_block_1 (This makes yellow_block_1 clear, helping satisfy constraint 3)

4. stack white_block_1 black_block_1 (This makes black_block_1 not clear, required for constraint 4)

5. pickup yellow_block_1 (To satisfy constraint 4, we need yellow_block_1 not on the table)

6. stack yellow_block_1 white_block_1 (Now, yellow_block_1 is not on the table, satisfying constraint 4 along with black_block_1 not being clear)

7. unstack grey_block_2 blue_block_1 (We need to free blue_block_1 to move it)

8. stack grey_block_2 yellow_block_2 (This makes yellow_block_2 not clear, required for constraint 6 before blue_block_1 is moved)

9. pickup blue_block_1 (This satisfies constraint 9: we're holding blue_block_1, and also satisfies constraint 5: blue_block_1 is not on the table)

10. stack blue_block_1 black_block_1 (This places blue_block_1 on top of black_block_1)

11. pickup grey_block_1 (Now we're holding grey_block_1, and blue_block_1 is on top of black_block_1, satisfying constraint 1)

12. putdown grey_block_1 (Done with grey_block_1)

13. unstack blue_block_1 black_block_1 (We need to place blue_block_1 on yellow_block_2 for the goal)

14. unstack grey_block_2 yellow_block_2 (We need to clear yellow_block_2)

15. stack grey_block_2 grey_block_1 (This is one option for placing grey_block_2 elsewhere)

16. stack blue_block_1 yellow_block_2 (Goal achieved: blue_block_1 is on top of yellow_block_2)

This plan should satisfy all constraints. Let's review them one by one:

1. Constraint 1 (At some point, we're holding grey_block_1 AND blue_block_1 is on top of black_block_1): Satisfied in step 11, as we've just picked up grey_block_1 and blue_block_1, which is on top of black_block_1.
2. Constraint 2 (At some point, grey_block_1 is clear): Satisfied after step 1, when grey_block_2 is unstacked from grey_block_1.
3. Constraint 3 (At some point, either grey_block_1 is on top of white_block_1 OR yellow_block_1 is clear): Satisfied after step 3, when white_block_1 is unstacked from yellow_block_1.
4. Constraint 4 (At some point, yellow_block_1 is not on the table AND black_block_1 is not clear): Satisfied after step 6, when yellow_block_1 is on white_block_1 and white_block_1 is on black_block_1.
5. Constraint 5 (At some point, blue_block_1 is not on the table): Satisfied in step 9, as we've picked up blue_block_1.
6. Constraint 6 (If blue_block_1 is not on the table, then there must be an earlier state where yellow_block_2 is not clear): Satisfied as we stack grey_block_2 on yellow_block_2 in step 8, and then only pick up blue_block_1 in step 9.
7. Constraint 7 (At some point, yellow_block_2 is clear): Satisfied after step 14.
8. Constraint 8 (If yellow_block_2 is clear, then we have blue_block_1 on top of black_block_1 OR grey_block_2 on the table): Satisfied as yellow_block_2 is clear after step 14, and we've already put blue_block_1 on top of black_block_1 (steps 9-10). So the first clause in the OR is satisfied.
9. Constraint 9 (At some point, we're holding blue_block_1): Satisfied in step 9.
10. Constraint 10 (If we're holding blue_block_1, there is an earlier state where grey_block_2 is on top of blue_block_1): Satisfied as we stack grey_block_2 on blue_block_1 in step 2, and then hold blue_block_1 in step 9.

Hmm, but I'm worried about Constraint 8. The constraint says: "If yellow_block_2 is clear, then at the same state or some later state, either blue_block_1 is on top of black_block_1 OR grey_block_2 is on the table". The problem is that we're clearing yellow_block_2 at step 14, but blue_block_1 is already removed from black_block_1 in step 13, and we're about to stack grey_block_2 on grey_block_1 in step 15. We need to ensure that grey_block_2 is on the table, or blue_block_1 is on black_block_1, after yellow_block_2 is clear. This isn't the case with my current plan.

Let's modify:

1. unstack grey_block_2 grey_block_1 (This satisfies constraint 2: grey_block_1 is clear)

2. stack grey_block_2 blue_block_1 (This helps satisfy constraint 10: grey_block_2 is on top of blue_block_1)

3. unstack white_block_1 yellow_block_1 (This makes yellow_block_1 clear, helping satisfy constraint 3)

4. stack white_block_1 black_block_1 (This makes black_block_1 not clear, required for constraint 4)

5. pickup yellow_block_1 (To satisfy constraint 4, we need yellow_block_1 not on the table)

6. stack yellow_block_1 white_block_1 (Now, yellow_block_1 is not on the table, satisfying constraint 4 along with black_block_1 not being clear)

7. unstack grey_block_2 blue_block_1 (We need to free blue_block_1 to move it)

8. stack grey_block_2 yellow_block_2 (This makes yellow_block_2 not clear, required for constraint 6 before blue_block_1 is moved)

9. pickup blue_block_1 (This satisfies constraint 9: we're holding blue_block_1, and also satisfies constraint 5: blue_block_1 is not on the table)

10. stack blue_block_1 black_block_1 (This places blue_block_1 on top of black_block_1)

11. pickup grey_block_1 (Now we're holding grey_block_1, and blue_block_1 is on top of black_block_1, satisfying constraint 1)

12. putdown grey_block_1 (Done with grey_block_1)

13. unstack grey_block_2 yellow_block_2 (We need to clear yellow_block_2, but we want to satisfy constraint 8)

Now, after we clear yellow_block_2, we need to ensure that either blue_block_1 is on top of black_block_1, OR grey_block_2 is on the table. Since we've already stacked blue_block_1 on black_block_1 in step 10 and it's still there, we should be fine. But to be extra careful:

14. putdown grey_block_2 (This places grey_block_2 on the table, ensuring constraint 8 is satisfied as well)

15. unstack blue_block_1 black_block_1 (We need to place blue_block_1 on yellow_block_2 for the goal)

16. stack blue_block_1 yellow_block_2 (Goal achieved: blue_block_1 is on top of yellow_block_2)

Alright, now I believe this satisfies all constraints.

1. Constraint 1 (At some point, we're holding grey_block_1 AND blue_block_1 is on top of black_block_1): Satisfied in step 11.
2. Constraint 2 (At some point, grey_block_1 is clear): Satisfied after step 1.
3. Constraint 3 (At some point, either grey_block_1 is on top of white_block_1 OR yellow_block_1 is clear): Satisfied after step 3, when white_block_1 is unstacked from yellow_block_1.
4. Constraint 4 (At some point, yellow_block_1 is not on the table AND black_block_1 is not clear): Satisfied after step 6, when yellow_block_1 is on white_block_1 and white_block_1 is on black_block_1.
5. Constraint 5 (At some point, blue_block_1 is not on the table): Satisfied in step 9.
6. Constraint 6 (If blue_block_1 is not on the table, then there must be an earlier state where yellow_block_2 is not clear): Satisfied as we stack grey_block_2 on yellow_block_2 in step 8, and then pick up blue_block_1 in step 9.
7. Constraint 7 (At some point, yellow_block_2 is clear): Satisfied after step 13.
8. Constraint 8 (If yellow_block_2 is clear, then at the same state or some later state, either blue_block_1 is on top of black_block_1 OR grey_block_2 is on the table): Satisfied as yellow_block_2 is clear after step 13, and blue_block_1 is on top of black_block_1.
9. Constraint 9 (At some point, we're holding blue_block_1): Satisfied in step 9.
10. Constraint 10 (If we're holding blue_block_1, there is an earlier state where grey_block_2 is on top of blue_block_1): Satisfied as we stack grey_block_2 on blue_block_1 in step 2, and then hold blue_block_1 in step 9.

The goal (blue_block_1 is on top of yellow_block_2) is achieved in step 16.

I think this plan is optimal, given our specific set of constraints. Let me check one more time.

Actually, let me go through the plan step by step again just to make sure I'm not missing anything.

Starting from:
- yellow_block_1 is on the table with white_block_1 on top of it
- black_block_1 is on the table and is clear
- grey_block_1 is on the table with grey_block_2 on top of it
- yellow_block_2 is on the table and is clear
- blue_block_1 is on the table and is clear

1. unstack grey_block_2 grey_block_1 (grey_block_1 is now clear, grey_block_2 is in hand)

2. stack grey_block_2 blue_block_1 (grey_block_2 is on blue_block_1)

3. unstack white_block_1 yellow_block_1 (yellow_block_1 is now clear, white_block_1 is in hand)

4. stack white_block_1 black_block_1 (white_block_1 is on black_block_1)

5. pickup yellow_block_1 (yellow_block_1 is in hand)

6. stack yellow_block_1 white_block_1 (yellow_block_1 is on white_block_1. At this point, black_block_1 is not clear because it has white_block_1 on it, and yellow_block_1 is not on the table, satisfying constraint 4.)

7. unstack grey_block_2 blue_block_1 (grey_block_2 is in hand)

8. stack grey_block_2 yellow_block_2 (grey_block_2 is on yellow_block_2)

9. pickup blue_block_1 (blue_block_1 is in hand, satisfying constraint 9)

10. stack blue_block_1 black_block_1 (blue_block_1 is on black_block_1)

11. pickup grey_block_1 (grey_block_1 is in hand. At this point, we're holding grey_block_1 and blue_block_1 is on top of black_block_1, satisfying constraint 1.)

12. putdown grey_block_1 (grey_block_1 is on the table)

13. unstack grey_block_2 yellow_block_2 (yellow_block_2 is now clear, grey_block_2 is in hand)

14. putdown grey_block_2 (grey_block_2 is on the table. At this point, yellow_block_2 is clear and grey_block_2 is on the table, satisfying constraint 8.)

15. unstack blue_block_1 black_block_1 (blue_block_1 is in hand)

16. stack blue_block_1 yellow_block_2 (Goal achieved: blue_block_1 is on top of yellow_block_2)

Alright, this plan seems good to me. All constraints are satisfied, and the goal is achieved.

Actually, one more thing: In constraint 6, it says, "If blue_block_1 is not on the table, then there must be an earlier state in which yellow_block_2 is not clear." In my plan, blue_block_1 first leaves the table in step 9, and yellow_block_2 is made not clear in step 8, which is indeed earlier. This is satisfied.

However, constraint 10 says, "If you are holding blue_block_1, then there must be an earlier state in which grey_block_2 is on top of blue_block_1." In my plan, we hold blue_block_1 in step 9, and grey_block_2 is on top of blue_block_1 in steps 2-7, which is indeed before. This is satisfied.

I believe this plan is optimal for achieving the goal while satisfying all constraints.

Let's write the actual plan:

```
unstack grey_block_2 grey_block_1
stack grey_block_2 blue_block_1
unstack white_block_1 yellow_block_1
stack white_block_1 black_block_1
pickup yellow_block_1
stack yellow_block_1 white_block_1
unstack grey_block_2 blue_block_1
stack grey_block_2 yellow_block_2
pickup blue_block_1
stack blue_block_1 black_block_1
pickup grey_block_1
putdown grey_block_1
unstack grey_block_2 yellow_block_2
putdown grey_block_2
unstack blue_block_1 black_block_1
stack blue_block_1 yellow_block_2
```

But I just realized something. I need to be more careful with the naming convention when writing the final plan. In the domain specification, the action names and arguments are written without the "_block" suffix. So let me rewrite to match that convention:

```
unstack grey_block_2 grey_block_1
stack grey_block_2 blue_block_1
unstack white_block_1 yellow_block_1
stack white_block_1 black_block_1
pickup yellow_block_1
stack yellow_block_1 white_block_1
unstack grey_block_2 blue_block_1
stack grey_block_2 yellow_block_2
pickup blue_block_1
stack blue_block_1 black_block_1
pickup grey_block_1
putdown grey_block_1
unstack grey_block_2 yellow_block_2
putdown grey_block_2
unstack blue_block_1 black_block_1
stack blue_block_1 yellow_block_2
```

Actually, you know what, let's double check exactly how we're supposed to refer to the blocks.

In the problem statement objects are defined as, e.g., "block yellow_block_1", but the description of the initial and goal states just refers to them as "yellow_block_1", without the "block" prefix. I'm pretty sure we should use the exact object names like "yellow_block_1" in the plan, without the "block" prefix. These names, e.g. "yellow_block_1", are the constants, whereas "block" is the type.

So my final answer is:

```
unstack grey_block_2 grey_block_1
stack grey_block_2 blue_block_1
unstack white_block_1 yellow_block_1
stack white_block_1 black_block_1
pickup yellow_block_1
stack yellow_block_1 white_block_1
unstack grey_block_2 blue_block_1
stack grey_block_2 yellow_block_2
pickup blue_block_1
stack blue_block_1 black_block_1
pickup grey_block_1
putdown grey_block_1
unstack grey_block_2 yellow_block_2
putdown grey_block_2
unstack blue_block_1 black_block_1
stack blue_block_1 yellow_block_2
```